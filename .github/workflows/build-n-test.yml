name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [main]

jobs:
  pr-title-check:
    name: PR Title Check
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04

    steps:
      - name: Check PR Title
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title;
            const pattern = /(^[mM]erge\s.*$)|(^[rR]evert\s.*$)|(^BREAKING CHANGE:.*$)|(^MINOR\s.*$)|(^(\w+)(?:\(([\w\$\.\-\*\s]+)\))?\:\s(.+)$)/;
            if (!pattern.test(title)) {
              core.setFailed(`PR title "${title}" doesn't match required format. Please use one of:
              - Conventional commit format: "type(scope): description"
              - Merge format: "Merge ..."
              - Revert format: "Revert ..."
              - Breaking change: "BREAKING CHANGE: description"
              - Minor change: "MINOR description"`);
            }

  build:
    name: ${{ matrix.os }} Build and Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14]
        include:
          - os: ubuntu-22.04
            ccache_dir: ~/.ccache
            deps_command: |
              sudo apt-get update -qq
              sudo apt-get install -y --no-install-recommends \
                build-essential \
                cmake \
                curl \
                libcurl4-openssl-dev \
                zlib1g-dev \
                libzstd-dev \
                libsnappy-dev \
                ccache

          - os: macos-14
            ccache_path: /opt/homebrew/opt/ccache/libexec
            deps_command: |
              brew update
              brew install curl ccache

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install clang-format
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "::group::Installing CLang Format"
          sudo apt-get update
          sudo apt-get install clang-format-15
          echo "::endgroup::"

      - name: Check C++ Code Style
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "::group::Checking C++ Code Style"
          find src/ include/ -name '*.cpp' -o -name '*.hpp' | xargs clang-format-15 --dry-run
          echo "::endgroup::"

      - name: Set up ccache
        run: |
          echo "CCACHE_DIR=${{ matrix.ccache_dir }}" >> $GITHUB_ENV
          if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            echo "/usr/lib/ccache" >> $GITHUB_PATH
          elif [ "${{ matrix.os }}" = "macos-14" ]; then
            echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          fi

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.ccache_dir }}
            build/_deps
          key: ${{ runner.os }}-deps-ubuntu-22-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-ubuntu-22

      - name: Install System Dependencies
        run: |
          echo "::group::Installing dependencies"
          ${{ matrix.deps_command }}
          echo "::endgroup::"

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DLOAD_TESTS=ON ..

      - name: Build
        run: |
          cd build
          make -j$(getconf _NPROCESSORS_ONLN)

      - name: Show Build Summary
        run: |
          echo "Build succeeded on ${{ matrix.os }}"
          ccache -s -v

      - name: Install GraphAr CLI
        if: matrix.os == 'ubuntu-22.04'
        run: |
          pip3 install --upgrade pip
          install_cli() {
            set -euxo pipefail
            local ROOT_DIR=$(pwd)
            local DEPS_DIR=$ROOT_DIR/build/_deps
            local ARROW_INSTALL_DIR=$DEPS_DIR/arrow-install
            local ARROW_BUILD_DIR=$DEPS_DIR/arrow-prefix/src/arrow-build
            local PROTOBUF_INSTALL_DIR=$ARROW_BUILD_DIR/protobuf_ep-install
            local GRAPHAR_CLI_DIR=$DEPS_DIR/graphar-prefix/src/graphar/cli
            
            local CMAKE_ARGS=(
              --config-settings=cmake.define.Arrow_DIR="$ARROW_INSTALL_DIR/lib/cmake/Arrow"
              --config-settings=cmake.define.Parquet_DIR="$ARROW_INSTALL_DIR/lib/cmake/Parquet"
              --config-settings=cmake.define.ArrowDataset_DIR="$ARROW_INSTALL_DIR/lib/cmake/ArrowDataset"
              --config-settings=cmake.define.ArrowAcero_DIR="$ARROW_INSTALL_DIR/lib/cmake/ArrowAcero"
              --config-settings=cmake.define.Protobuf_INCLUDE_DIR="$PROTOBUF_INSTALL_DIR/include"
              --config-settings=cmake.define.Protobuf_LIBRARIES="$PROTOBUF_INSTALL_DIR/lib/libprotobuf.a"
              --config-settings=cmake.define.CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON
            )
            
            pip3 install "$GRAPHAR_CLI_DIR" "${CMAKE_ARGS[@]}"
          }
          install_cli

      - name: Generate GraphAr data
        if: matrix.os == 'ubuntu-22.04'
        run: |
          generate_graphar_data() {
            set -euxo pipefail
            local ROOT_DIR=$(pwd)
  
            local GRAPH_DIR=$ROOT_DIR/data/snap-musae-github
            local GRAPH_IMPORT_TEMPLATE=$GRAPH_DIR/import.script.git.yaml
            local GRAPH_IMPORT=$GRAPH_DIR/import.git.yaml
            local GRAPH_RESULT_DIR=$GRAPH_DIR/graphar
            mkdir -p "$GRAPH_RESULT_DIR"
            cp "$GRAPH_IMPORT_TEMPLATE" "$GRAPH_IMPORT"
            sed -i "s|\$DIR_PATH|$GRAPH_DIR|g" "$GRAPH_IMPORT"
          
            graphar import -c "$GRAPH_IMPORT"
            rm "$GRAPH_IMPORT"

            local GRAPH_NAME=$(grep "name:" "$GRAPH_IMPORT_TEMPLATE" | head -n1 | sed 's/^[^:]*:[[:space:]]*//')
            local GRAPH_INFO_FILE=$GRAPH_RESULT_DIR/$GRAPH_NAME.graph.yaml
  
            local edges=$(find "$GRAPH_RESULT_DIR" -maxdepth 1 -type f -name "*edge*" -exec basename {} \;)
            local vertices=$(find "$GRAPH_RESULT_DIR" -maxdepth 1 -type f -name "*vertex*" -exec basename {} \;)
            
            {
              echo "edges:"
              for edge in "${edges[@]}"; do
              echo "  - $edge"
              done
          
              echo "name: $GRAPH_NAME"
          
              echo "vertices:"
              for vertex in "${vertices[@]}"; do
              echo "  - $vertex"
              done
          
              echo "version: gar/v1"
            } > "$GRAPH_INFO_FILE"
          }
          generate_graphar_data

      - name: Run Tests
        if: matrix.os == 'ubuntu-22.04'
        run: |
          build/_deps/duckdb-build/test/unittest "[graphar]" --reporter console  || exit 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-graphar-${{ matrix.os }}
          path: |
            ./build/_deps/duckdb-build/extension/duckdb_graphar/duckdb_graphar.duckdb_extension
          if-no-files-found: error
